name: Main Flow

on:
  push:
    branches:
      - feat/OR-1618-seperate-e2e-test

jobs:
  pnpm-monorepo:
    runs-on: ubuntu-latest
    container:
      image: onthertech/thanos-ci-builder:ecotone

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # Declares the repository safe and not under dubious ownership.
      - name: Add repository to git safe directories
        run: git config --global --add safe.directory $GITHUB_WORKSPACE

      - name: Check L1 geth version
        run: ./ops/scripts/geth-version-checker.sh || (echo "geth version is wrong, update ci-builder"; exit 1)

      - name: Git submodules
        run: make submodules

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"

      - name: Restore PNPM Package Cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: pnpm-packages-v2-${{ hashFiles('pnpm-lock.yaml') }}

      - name: Fetch dependencies
        run: pnpm fetch --frozen-lockfile --prefer-offline

      - name: Save PNPM Package Cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: pnpm-packages-v2-${{ hashFiles('pnpm-lock.yaml') }}

      - name: Install dependencies
        run: pnpm install:ci:offline

      - name: Print forge version
        run: forge --version

      - name: Build monorepo
        run: pnpm build

      - name: Persist to workspace
        uses: actions/upload-artifact@v4
        with:
          name: dist-artifacts
          path: |
            packages/**/dist
            packages/contracts-bedrock/forge-artifacts

      - name: Generate FPAC allocs
        run: DEVNET_FPAC="true" make devnet-allocs

      - name: Copy FPAC allocs to .devnet-fault-proofs
        run: cp -r .devnet/ .devnet-fault-proofs/

      - name: Generate non-FPAC allocs
        run: make devnet-allocs

      - name: Persist build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            packages/**/dist
            packages/tokamak/contracts-bedrock/cache
            packages/tokamak/contracts-bedrock/artifacts
            packages/tokamak/contracts-bedrock/forge-artifacts
            packages/tokamak/contracts-bedrock/tsconfig.tsbuildinfo
            packages/tokamak/contracts-bedrock/tsconfig.build.tsbuildinfo
            .devnet/allocs-l1.json
            .devnet/addresses.json
            .devnet-fault-proofs/allocs-l1.json
            .devnet-fault-proofs/addresses.json
            packages/tokamak/contracts-bedrock/deploy-config/devnetL1.json
            packages/tokamak/contracts-bedrock/deployments/devnetL1

            cannon-prestate:
              runs-on: ubuntu-latest
              steps:
                - name: Checkout repository
                  uses: actions/checkout@v2

                - name: Set up Go
                  uses: actions/setup-go@v4
                  with:
                    go-version: '1.21'

                - name: Load cannon prestate cache
                  id: cannon-prestate-cache
                  uses: actions/cache@v2
                  with:
                    path: |
                      op-program/bin/prestate.json
                      op-program/bin/meta.json
                      op-program/bin/prestate-proof.json
                    key: ${{ runner.os }}-cannon-prestate-${{ hashFiles('./cannon/bin/cannon') }}-${{ hashFiles('op-program/bin/op-program-client.elf') }}

                - name: Generate cannon prestate
                  run: make cannon-prestate

                - name: Save Cannon prestate to cache
                  uses: actions/cache@v2
                  with:
                    path: |
                      op-program/bin/prestate.json
                      op-program/bin/meta.json
                      op-program/bin/prestate-proof.json
                    key: ${{ runner.os }}-cannon-prestate-${{ hashFiles('./cannon/bin/cannon') }}-${{ hashFiles('op-program/bin/op-program-client.elf') }}

                - name: Persist Cannon prestate to workspace
                  uses: actions/upload-artifact@v2
                  with:
                    name: cannon-prestate
                    path: |
                      op-program/bin/prestate.json
                      op-program/bin/meta.json
                      op-program/bin/prestate-proof.json

  cannon-go-lint-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Docker
        uses: docker/setup-qemu-action@v2

      - name: Check if changes affect relevant paths
        id: changes-check
        uses: dorny/paths-filter@v2
        with:
          filters: |
            cannon:
              - 'cannon/**'
            contracts-bedrock:
              - 'packages/tokamak/contracts-bedrock/src/cannon/**'
            op-preimage:
              - 'op-preimage/**'

      - name: Prep Cannon results dir
        run: mkdir -p /tmp/test-results

      - name: Build Cannon example binaries
        run: make elf
        working-directory: cannon/example
        if: steps.changes-check.outputs.cannon == 'true' || steps.changes-check.outputs.contracts-bedrock == 'true' || steps.changes-check.outputs.op-preimage == 'true'

      - name: Cannon Go lint
        run: make lint
        working-directory: cannon
        if: steps.changes-check.outputs.cannon == 'true' || steps.changes-check.outputs.contracts-bedrock == 'true' || steps.changes-check.outputs.op-preimage == 'true'

      - name: Cannon Go tests
        run: |
          gotestsum --format=standard-verbose --junitfile=/tmp/test-results/cannon.xml \
          -- -parallel=2 -coverpkg=github.com/tokamak-network/thanos/cannon/... -coverprofile=coverage.out ./...
        working-directory: cannon
        if: steps.changes-check.outputs.cannon == 'true' || steps.changes-check.outputs.contracts-bedrock == 'true' || steps.changes-check.outputs.op-preimage == 'true'

      - name: Upload Cannon coverage
        run: codecov --verbose --clean --flags cannon-go-tests
        if: steps.changes-check.outputs.cannon == 'true' || steps.changes-check.outputs.contracts-bedrock == 'true' || steps.changes-check.outputs.op-preimage == 'true'

      - name: Store test results
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: test-results
          path: /tmp/test-results

  go-test:
    runs-on: ubuntu-latest
    name: Go test ${{matrix.name}}
    strategy:
      matrix:
        name: [
          'op-heartbeat-tests',
          'op-batcher-tests',
          'op-bindings-tests',
          'op-chain-ops-tests',
          'op-node-tests',
          'op-proposer-tests',
          'op-dispute-mon-tests',
          'op-conductor-tests',
          'op-program-tests',
          'op-service-tests'
        ]
        module: [
          'op-heartbeat',
          'op-batcher',
          'op-bindings',
          'op-chain-ops',
          'op-node',
          'op-proposer',
          'op-challenger',
          'op-conductor',
          'op-program',
          'op-service'
        ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Prep results dir
        run: mkdir -p /tmp/test-results

      - name: Run tests
        run: |
          gotestsum --format=standard-verbose --junitfile=/tmp/test-results/${{ matrix.module }}.xml \
          -- -parallel=8 -coverprofile=coverage.out ./...
        working-directory: ${{ matrix.module }}


      - name: Store test results
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: test-results
          path: /tmp/test-results

  indexer-tests:
    runs-on: ubuntu-latest
    env:
      DEVNET_FPAC: 'false'
      OP_E2E_USE_FPAC: 'false'
    strategy:
      matrix:
        fpac: ['', 'fault-proofs']
    services:
      postgres:
        image: postgres:14.1
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres
          POSTGRES_PASSWORD: postgres
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set environment variables if FPAC is true
        if: matrix.fpac == 'fault-proofs'
        run: |
          echo 'DEVNET_FPAC=true' >> $GITHUB_ENV
          echo 'OP_E2E_USE_FPAC=true' >> $GITHUB_ENV

      - name: Check if changes affect the relevant paths
        id: changes-check
        uses: dorny/paths-filter@v2
        with:
          filters: |
            indexer:
              - 'indexer/**'

      - name: Lint
        run: golangci-lint run -E goimports,sqlclosecheck,bodyclose,asciicheck,misspell,errorlint --timeout 4m -e "errors.As" -e "errors.Is" ./...
        working-directory: indexer
        if: steps.changes-check.outputs.indexer == 'true'

      - name: Git submodules
        run: make submodules

      - name: Generate cannon prestate
        run: make cannon-prestate

      - name: Generate L1 state
        run: make devnet-allocs

      - name: Test
        run: |
          mkdir -p /test-results
          DB_USER=postgres gotestsum --format=standard-verbose --junitfile=/test-results/indexer_tests.xml -- -parallel=4 ./...
        working-directory: indexer
        env:
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres
          POSTGRES_PASSWORD: postgres

      - name: Store test results
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: test-results
          path: /test-results

      - name: Build
        run: make indexer
        working-directory: indexer

      - name: Install node_modules
        run: pnpm install:ci

      - name: Install tygo
        run: go install github.com/gzuidhof/tygo@latest
        working-directory: indexer/api-ts

      - name: Check generated code
        run: npm run generate && git diff --exit-code
        working-directory: indexer/api-ts